{"version":3,"sources":["../src/index.js"],"names":["handleSigningKeyError","err","cb","name","fastifyJwtSecret","options","undefined","ArgumentError","client","JwksClient","onError","secretProvider","request","decoded","Error","header","alg","getSigningKey","kid","key","newError","publicKey","rsaPublicKey","module","exports"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,GAAD,EAAMC,EAAN,EAAa;AACzC;AACA,MAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,KAAa,yBAAxB,EAAmD;AACjD,WAAOD,EAAE,CAAC,IAAD,CAAT;AACD;;AACD,SAAOA,EAAE,CAACD,GAAD,CAAT;AACD,CAND;;AAQe,SAASG,gBAAT,CAA0BC,OAA1B,EAAmC;AAChD,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,UAAM,IAAIC,sBAAJ,CACJ,uEADI,CAAN;AAGD;;AAED,MAAMC,MAAM,GAAG,IAAIC,mBAAJ,CAAeJ,OAAf,CAAf;AACA,MAAMK,OAAO,GAAGL,OAAO,CAACL,qBAAR,IAAiCA,qBAAjD;AACA,SAAO,SAASW,cAAT,CAAwBC,OAAxB,EAAiCC,OAAjC,EAA0CX,EAA1C,EAA8C;AACnD;AACA,QAAI,CAACW,OAAL,EAAc;AACZ,aAAOX,EAAE,CAAC,IAAIY,KAAJ,CAAU,eAAV,CAAD,EAA6B,IAA7B,CAAT;AACD,KAJkD,CAKnD;;;AACA,QAAID,OAAO,CAACE,MAAR,CAAeC,GAAf,KAAuB,OAA3B,EAAoC;AAClC,aAAOd,EAAE,CAAC,IAAIY,KAAJ,CAAU,yBAAV,CAAD,EAAuC,IAAvC,CAAT;AACD;;AAEDN,IAAAA,MAAM,CAACS,aAAP,CAAqBJ,OAAO,CAACE,MAAR,CAAeG,GAApC,EAAyC,UAACjB,GAAD,EAAMkB,GAAN,EAAc;AACrD,UAAIlB,GAAJ,EAAS;AACP,eAAOS,OAAO,CAACT,GAAD,EAAM,UAAAmB,QAAQ;AAAA,iBAAIlB,EAAE,CAACkB,QAAD,EAAW,IAAX,CAAN;AAAA,SAAd,CAAd;AACD,OAHoD,CAIrD;;;AACA,aAAOlB,EAAE,CAAC,IAAD,EAAOiB,GAAG,CAACE,SAAJ,IAAiBF,GAAG,CAACG,YAA5B,CAAT;AACD,KAND;AAOD,GAjBD;AAkBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["import JwksClient, { ArgumentError } from 'jwks-rsa';\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n  return cb(err);\n};\n\nexport default function fastifyJwtSecret(options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError(\n      'An options object must be provided when initializing fastifyJwtSecret',\n    );\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(request, decoded, cb) {\n    // if decoded is null, token is not present or is invalid\n    if (!decoded) {\n      return cb(new Error('Invalid token'), null);\n    }\n    // Only RS256 is supported.\n    if (decoded.header.alg !== 'RS256') {\n      return cb(new Error('Only RS256 is supported'), null);\n    }\n\n    client.getSigningKey(decoded.header.kid, (err, key) => {\n      if (err) {\n        return onError(err, newError => cb(newError, null));\n      }\n      // Provide the key.\n      return cb(null, key.publicKey || key.rsaPublicKey);\n    });\n  };\n}\n\nmodule.exports = fastifyJwtSecret;\n"],"file":"index.js"}